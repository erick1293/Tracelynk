"use strict";
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
var no_api_keys_1 = __importStar(require("./no-api-keys"));
var parser_1 = require("../utils/parser");
var rules_1 = require("../utils/rules");
new rules_1.RuleTester({
    parserOptions: {
        ecmaVersion: "latest"
    },
    parser: parser_1.espreeParser
}).run("no-api-keys", no_api_keys_1["default"], {
    valid: [
        "const apiKey = process.env.GOOGLE_MAPS_API_KEY;",
        'const apiKey = "YOUR_API_KEY";',
        'const apiKey = "AIzaSomeStringThatDoesntMatch";',
    ],
    invalid: [
        {
            code: 'const apiKey = "AIza00000000000000000000000000000000000";',
            errors: [
                {
                    messageId: no_api_keys_1.messageId,
                    suggestions: [
                        {
                            messageId: "replaceWithEnvVar",
                            output: "const apiKey = process.env.GOOGLE_MAPS_API_KEY;"
                        },
                        {
                            messageId: "replaceWithPlaceholder",
                            output: 'const apiKey = "YOUR_API_KEY";'
                        },
                    ]
                },
            ]
        },
    ]
});
