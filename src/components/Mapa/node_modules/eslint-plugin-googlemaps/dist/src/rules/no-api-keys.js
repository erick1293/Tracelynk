"use strict";
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;
exports.__esModule = true;
exports.messageId = void 0;
var rules_1 = require("../utils/rules");
var matchesApiKey = function (text) {
    return /AIza[0-9A-Za-z\\-_]{35}/g.test(text);
};
exports.messageId = (0, rules_1.camelCased)(__filename);
var description = "Avoid placing API keys in source code. Instead use build tools that insert the API key using environment variables similar to:\n\n```js\nconst apiKey = process.env.GOOGLE_MAPS_API_KEY;\n```\n\nThis pattern enables use of development keys and prevents use of production keys that may have higher quotas.\n";
exports["default"] = (0, rules_1.createRule)({
    name: __filename,
    meta: {
        docs: {
            description: description,
            recommended: "warn"
        },
        messages: (_a = {},
            _a[exports.messageId] = "Avoid placing API keys in source code.",
            _a.replaceWithEnvVar = "Use environment variables instead.",
            _a.replaceWithPlaceholder = "Use placeholder `YOUR_API_KEY` instead.",
            _a),
        hasSuggestions: true,
        schema: [],
        type: "suggestion"
    },
    defaultOptions: [],
    create: function (context) {
        return {
            Literal: function (node) {
                if (node.value && matchesApiKey(node.value.toString())) {
                    context.report({
                        node: node,
                        messageId: exports.messageId,
                        suggest: [
                            {
                                messageId: "replaceWithEnvVar",
                                fix: function (fixer) {
                                    return fixer.replaceText(node, "process.env.GOOGLE_MAPS_API_KEY");
                                }
                            },
                            {
                                messageId: "replaceWithPlaceholder",
                                fix: function (fixer) {
                                    return fixer.replaceText(node, "\"YOUR_API_KEY\"");
                                }
                            },
                        ]
                    });
                }
            }
        };
    }
});
