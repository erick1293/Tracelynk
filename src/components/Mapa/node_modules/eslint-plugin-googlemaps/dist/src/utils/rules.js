"use strict";
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.RuleTester = exports.camelCased = exports.createRule = void 0;
var path_1 = require("path");
var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
var package_json_1 = require("../../package.json");
var REPO_URL = package_json_1.repository.url.replace(/\.git$/, "");
exports.createRule = experimental_utils_1.ESLintUtils.RuleCreator(function (name) {
    var ruleName = (0, path_1.parse)(name).name;
    return "".concat(REPO_URL, "/blob/v").concat(package_json_1.version, "/docs/rules/").concat(ruleName, ".md");
});
var camelCased = function (s) {
    return s.replace(/-([a-z])/g, function (g) {
        return g[1].toUpperCase();
    });
};
exports.camelCased = camelCased;
// see https://github.com/wikimedia/eslint-docgen/issues/124
// this class also always generates docs regardless of environment vars
var RuleTester = /** @class */ (function (_super) {
    __extends(RuleTester, _super);
    function RuleTester() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RuleTester.prototype.run = function (ruleName, rule, tests) {
        var _a, _b;
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        var writeDocs = require("eslint-docgen/src/write-docs-from-tests");
        // @ts-ignore
        (_b = (_a = experimental_utils_1.TSESLint.RuleTester).it) === null || _b === void 0 ? void 0 : _b.call(_a, ruleName, function (done) {
            writeDocs(ruleName, rule, tests, {}, done);
        });
        return _super.prototype.run.call(this, ruleName, rule, tests);
    };
    RuleTester.prototype.defineRule = function (name, rule) {
        _super.prototype.defineRule.call(this, name, rule);
    };
    return RuleTester;
}(experimental_utils_1.TSESLint.RuleTester));
exports.RuleTester = RuleTester;
